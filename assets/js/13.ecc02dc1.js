(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{409:function(a,t,s){"use strict";s.r(t);var e=s(56),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"浅谈-web-里面的布局方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅谈-web-里面的布局方式"}},[a._v("#")]),a._v(" 浅谈  WEB  里面的布局方式：")]),a._v(" "),s("h3",{attrs:{id:"布局的几种方式-静态布局-自适应布局-流式布局-响应式布局-弹性布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局的几种方式-静态布局-自适应布局-流式布局-响应式布局-弹性布局"}},[a._v("#")]),a._v(" 布局的几种方式（ 静态布局 / 自适应布局 / 流式布局 / 响应式布局 / 弹性布局）")]),a._v(" "),s("h3",{attrs:{id:"一、静态布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、静态布局"}},[a._v("#")]),a._v(" 一、静态布局")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("静态布局页面元素的尺寸一律使用px作为单位\n  1.布局特点\n    不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。\n    常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，\n    如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见于pc端\n  2.设计方法\n    PC：居中布局，所有样式使用绝对宽度/高度(px)，设计一个Layout，在屏幕宽高有调整时，使用横向和竖向的滚动条来查阅被遮掩部分\n      - 优点:\n        - 这种布局方式对设计师和CSS编写者来说都是最简单的，亦没有兼容性问题。\n      - 缺点：\n        - 显而易见，即不能根据用户的屏幕尺寸做出不同的表现。当前，大部分门户网站、大部分企业的PC宣传站点都采用了这种布局方式。\n")])])]),s("h3",{attrs:{id:"二、流式布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、流式布局"}},[a._v("#")]),a._v(" 二、流式布局")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("特点 是页面元素的宽度按照屏幕分辨率进行适配调整，但整体布局不变。代表作栅栏系统 网格系统\n1. 布局特点\n  屏幕分辨率变化时，页面里元素的大小会变化而但布局不变\n2. 设计方法\n  使用%百分比定义宽度，高度大都是用px来固定住\n  缺点明显：主要的问题是如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示\n")])])]),s("h3",{attrs:{id:"三、自适应布局-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、自适应布局-重要"}},[a._v("#")]),a._v(" 三、自适应布局  （重要）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("自适应布局的特点是分别为不同的屏幕分辨率定义布局，即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围。\n改变屏幕分辨率可以切换不同的静态局部（页面元素位置发生改变），但在每个静态布局中，\n页面元素不随窗口大小的调整发生变化。可以把自适应布局看作是静态布局的一个系列。\n  1、布局特点\n    屏幕分辨率变化时，页面里面元素的位置会变化而大小不会变化。\n    对于页面中信息较多，布局较为复杂的情况，我们可以采用自适应布局的方式。\n  2、设计方法\n    使用 @media 媒体查询给不同尺寸和介质的设备切换不同的样式。\n    在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局。\n")])])]),s("h3",{attrs:{id:"四、响应式布局-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、响应式布局-重要"}},[a._v("#")]),a._v(" 四、响应式布局   （重要）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("  1. 布局特点\n    每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变\n  2. 设计方法\n    媒体查询+流式布局。\n    优点：\n      适应pc  移动端，如果足够耐心，效果完美。\n      标签导航在接近手持终端设备时改变为经典的抽屉式导航；\n      网站的布局会根据视口来调整模块的大小和位置；\n      对于页面不是太复杂的情况下，我们可以利用响应式布局。\n    缺点：\n      媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。\n      要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。\n")])])]),s("h3",{attrs:{id:"五、rem-em布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、rem-em布局"}},[a._v("#")]),a._v(" 五、rem/em布局")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("  1. rem/em区别：rem是相对于html元素的font-size大小而言的，而em是相对于其父元素\n  2. 使用 em 或 rem 单位进行相对布局，相对%百分比更加灵活，同时可以支持浏览器的字体大小 调整和缩放等的正常显示\n  3. 浏览器的默认字体高度一般为16px，即1em:16px，但是 1:16 的比例不方便计算，为了使单位em/rem更直观，\n    CSS编写者常常将页面跟节点字体设为62.5%，比如选择用rem控制字体时，先需要设置根节点html的字体大小，\n    因为浏览器默认字体大小16px*62.5%=10px。这样1rem便是10px，方便了计算。\n")])])]),s("h2",{attrs:{id:"布局的优缺点的选择方向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局的优缺点的选择方向"}},[a._v("#")]),a._v(" 布局的优缺点的选择方向：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("1.如果只做pc端，那么静态布局（定宽度）是最好的选择；\n2.如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份css+一份js调节font-size搞定；\n3.如果pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局。\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);